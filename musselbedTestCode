import cv2
import numpy as np

from matplotlib import pyplot as plt

refPt = []

img = cv2.imread("C:/Users/emrer/Pictures/musselLarge.PNG")
#img = cv2.GaussianBlur(img, (21,21), cv2.BORDER_DEFAULT)
img = cv2.cvtColor(img,cv2.COLOR_BGR2GRAY)


original_img = img.copy()

def four_point_transform(image, pts):
    # obtain a consistent order of the points and unpack them
    # individually
    (tl, tr, br, bl) = pts

    # compute the width of the new image, which will be the
    # maximum distance between bottom-right and bottom-left
    # x-coordiates or the top-right and top-left x-coordinates
    widthA = np.sqrt(((br[0] - bl[0]) ** 2) + ((br[1] - bl[1]) ** 2))
    widthB = np.sqrt(((tr[0] - tl[0]) ** 2) + ((tr[1] - tl[1]) ** 2))
    maxWidth = max(int(widthA), int(widthB))

    # compute the height of the new image, which will be the
    # maximum distance between the top-right and bottom-right
    # y-coordinates or the top-left and bottom-left y-coordinates
    heightA = np.sqrt(((tr[0] - br[0]) ** 2) + ((tr[1] - br[1]) ** 2))
    heightB = np.sqrt(((tl[0] - bl[0]) ** 2) + ((tl[1] - bl[1]) ** 2))
    maxHeight = max(int(heightA), int(heightB))

    # now that we have the dimensions of the new image, construct
    # the set of destination points to obtain a "birds eye view",
    # (i.e. top-down view) of the image, again specifying points
    # in the top-left, top-right, bottom-right, and bottom-left
    # order
    dst = np.array([
        [0, 0],
        [maxWidth - 1, 0],
        [maxWidth - 1, maxHeight - 1],
        [0, maxHeight - 1]], dtype="float32")

    # compute the perspective transform matrix and then apply it
    matrix = cv2.getPerspectiveTransform(pts, dst)
    warped = cv2.warpPerspective(image, matrix, (maxWidth, maxHeight))

    # return the warped image
    return warped
# stores the xy coordinate and plots the reference point for image1 for perspective transform
    
def find_point_image(event, x, y, flags, param):
    if event == cv2.EVENT_LBUTTONDBLCLK:
        cv2.circle(img, (x, y), 5, (255, 0, 0), -1)
        refPt.append([x, y])


cv2.startWindowThread()
cv2.namedWindow('select')
cv2.setMouseCallback('select', find_point_image)

while True:
        cv2.imshow('select', img)

        # allows for user to do the next perspective transform by pressing ESC
        if cv2.waitKey(20) & 0xFF == 27:
            break

# adds image from perspective transform to results
new_image = four_point_transform(original_img, np.float32(refPt))

while True:
        cv2.imshow('new_img', new_image)

        # allows for user to do the next perspective transform by pressing ESC
        if cv2.waitKey(20) & 0xFF == 27:
            break
    
all_circs = cv2.HoughCircles(new_image, cv2.HOUGH_GRADIENT, 0.9, 0.1, param1 = 100, param2 = 10, minRadius = 1, maxRadius=5)
all_circs_rounded = np.uint16(np.around(all_circs))

print (all_circs_rounded)
print (all_circs_rounded.shape)
print ('Found ' + str(all_circs_rounded.shape[1])+' circles.')


circles = np.uint16(np.around(all_circs_rounded))
for i in circles[0,:]:
    cv2.circle(new_image,(i[0],i[1]),i[2],(0,255,0),2)
    cv2.circle(new_image,(i[0],i[1]),2,(0,0,255),3)
    
cv2.imshow('circles',new_image)
cv2.waitKey(0)
cv2.destroyAllWindows()
